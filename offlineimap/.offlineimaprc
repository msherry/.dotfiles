# -*- mode: conf-unix; -*-

# See /usr/local/etc/offlineimap.conf.default for a full listing of options

[general]
# List of accounts to be synced, separated by a comma.
accounts = dropbox
socktimeout = 60
fsync = false
pythonfile = ~/.offlineimap.py

[Account dropbox]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = dropbox-local

# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = dropbox-remote

# This header is where labels go.  Usually you will be fine
# with default value (X-Keywords), but in case you want it
# different, here we go:
labelsheader = X-Keywords

# Specifies if we want to sync GMail labels with the local repository.
# Effective only for GMail IMAP repositories.
#
# Non-ASCII characters in labels are badly handled or won't work at all.
synclabels = yes

autorefresh = 5
quick = 5
presynchook = ~/bin/maildir-notmuch-sync pre ~/Maildir/msherry@dropbox.com
postsynchook = ~/bin/maildir-notmuch-sync post ~/Maildir/msherry@dropbox.com; emacsclient --eval '(display-time-update)' > /dev/null


[Repository dropbox-local]
type = GmailMaildir

# Where should the mail be placed?
localfolders = ~/Maildir/msherry@dropbox.com
folderfilter = lambda foldername: foldername not in {
             }
nametrans = lambda foldername: {
    # 'Inbox': 'INBOX',
    'flagged': '[Gmail]/Starred',
    'archive': '[Gmail]/All Mail'}.get(foldername, foldername)


[Repository dropbox-remote]
# Remote repos can be IMAP or Gmail, the latter being a preconfigured IMAP.
type = Gmail
remoteuser = msherry@dropbox.com
# remotepass is an option here, but remotepasseval is better
remotepasseval = get_password_emacs("msherry@dropbox.com", "imap.gmail.com", "993")
maxconnections = 1
singlethreadperfolder = no

folderfilter = lambda foldername: foldername not in {
    'Crashlytics', 'Workflows', '[Gmail]/Trash', '[Gmail]/Spam', 'TODO', 'Flawless',
    'Specs', 'Pinlater', 'Failed Apogee builds'}
nametrans = lambda foldername: {
    # 'INBOX': 'Inbox',
    '[Gmail]/Starred': 'flagged',
    '[Gmail]/All Mail': 'archive'}.get(foldername, foldername)

sslcacertfile = /usr/local/etc/openssl/cert.pem
