# -*- mode: conf-unix; -*-

# See /usr/local/etc/offlineimap.conf.default for a full listing of options

[general]
# List of accounts to be synced, separated by a comma.
accounts = affirm,personal
socktimeout = 90
fsync = false
pythonfile = ~/.offlineimap.py

[Account personal]
localrepository = personal-local
remoterepository = personal-remote
labelsheader = X-Keywords
synclabels = yes
autorefresh = 5
quick = 10
presynchook = ~/bin/maildir-notmuch-sync pre ~/Maildir/msherry@gmail.com
postsynchook = ~/bin/maildir-notmuch-sync post ~/Maildir/msherry@gmail.com; emacsclient --eval '(display-time-update)' > /dev/null
# Only sync messages newer than this many days. Comment this out during initial sync!
maxage = 15

[Repository personal-local]
type = GmailMaildir
localfolders = ~/Maildir/msherry@gmail.com
# sep = /
folderfilter = lambda foldername: foldername not in {
             }
nametrans = lambda foldername: {
    # 'Inbox': 'INBOX',
    'flagged': '[Gmail]/Starred',
    'archive': '[Gmail]/All Mail',
    'tracking': 'Tracking',
    'sent': '[Gmail]/Sent Mail'}.get(foldername, foldername)

[Repository personal-remote]
type = Gmail
remoteuser = msherry@gmail.com
remotepasseval = get_password_emacs("msherry@gmail.com", "imap.gmail.com", "993")
maxconnections = 3
singlethreadperfolder = no
folderfilter = lambda foldername: foldername in {'[Gmail]/All Mail', '[Gmail]/Sent Mail', 'Tracking', 'INBOX'}
nametrans = lambda foldername: {
    # 'INBOX': 'Inbox',
    '[Gmail]/Starred': 'flagged',
    '[Gmail]/All Mail': 'archive',
    'Tracking': 'tracking',
    '[Gmail]/Sent Mail': 'sent'}.get(foldername, foldername)
sslcacertfile = /usr/local/etc/openssl/cert.pem
holdconnectionopen = yes


[Account affirm]
# Identifier for the local repository; e.g. the maildir to be synced via IMAP.
localrepository = affirm-local

# Identifier for the remote repository; i.e. the actual IMAP, usually non-local.
remoterepository = affirm-remote

# This header is where labels go.  Usually you will be fine
# with default value (X-Keywords), but in case you want it
# different, here we go:
labelsheader = X-Keywords

# Specifies if we want to sync GMail labels with the local repository.
# Effective only for GMail IMAP repositories.
#
# Non-ASCII characters in labels are badly handled or won't work at all.
synclabels = yes

autorefresh = 5
quick = 10
presynchook = ~/bin/maildir-notmuch-sync pre ~/Maildir/marc.sherry@affirm.com
postsynchook = ~/bin/maildir-notmuch-sync post ~/Maildir/marc.sherry@affirm.com; emacsclient --eval '(display-time-update)' > /dev/null
# Only sync messages newer than this many days. Comment this out during initial sync!
maxage = 15


[Repository affirm-local]
type = GmailMaildir

# Where should the mail be placed?
localfolders = ~/Maildir/marc.sherry@affirm.com
folderfilter = lambda foldername: foldername not in {
             }
nametrans = lambda foldername: {
    # 'Inbox': 'INBOX',
    'flagged': '[Gmail]/Starred',
    'archive': '[Gmail]/All Mail',
    'sent': '[Gmail]/Sent Mail',
    'differential.other': 'Differential: other',
    'identity_triage': 'Identity triage',
    'ts_triage': 'T&S Triage'}.get(foldername, foldername)


[Repository affirm-remote]
# Remote repos can be IMAP or Gmail, the latter being a preconfigured IMAP.
type = Gmail
remoteuser = marc.sherry@affirm.com
# remotepass is an option here, but remotepasseval is better
remotepasseval = get_password_emacs("marc.sherry@affirm.com", "imap.gmail.com", "993")
maxconnections = 3
singlethreadperfolder = no
holdconnectionopen = yes

# folderfilter = lambda foldername: foldername not in {
#     'Crashlytics', 'Workflows', '[Gmail]/Trash', '[Gmail]/Spam', '[Gmail]/Drafts', 'TODO', 'Flawless',
#     'Specs', 'Pinlater', 'Failed Apogee builds', 'Riskeng Triage', 'Netverify emails'}
folderfilter = lambda foldername: foldername in {'[Gmail]/All Mail', '[Gmail]/Sent Mail', 'INBOX'}
nametrans = lambda foldername: {
    # 'INBOX': 'Inbox',
    '[Gmail]/Starred': 'flagged',
    '[Gmail]/All Mail': 'archive',
    '[Gmail]/Sent Mail': 'sent',
    'Differential: other': 'differential.other',
    'Identity triage': 'identity_triage',
    'T&S Triage': 'ts_triage'}.get(foldername, foldername)

sslcacertfile = /usr/local/etc/openssl/cert.pem
